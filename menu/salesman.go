package menu

import (
	"bufio"
	"fmt"
	"github/kaiiiman/chairStore/storage"
	"github/kaiiiman/chairStore/warehouse"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"
)

func Salesman1() {
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ü—Ä–æ–¥–æ–≤—Ü–∞), –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–¥–∞—Ç—å –∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º")
	fmt.Println("–•–æ—Ä–æ—à–∏–π –∏–≥—Ä—ã!")
}
func waitEnter(reader *bufio.Reader) {
	fmt.Print("")
	_, _ = reader.ReadString('\n') // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è } //
}

func Doing() {
	reader := bufio.NewReader(os.Stdin)
	for {
		prompt := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
		menuItems := []string{"–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ü–æ–∏—Å–∫", "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", "–í—ã—Ö–æ–¥"}
		u := &UserInput{}

		CreatMenu(prompt, menuItems, u)
		fmt.Printf("\n–í—ã –≤—ã–±—Ä–∞–ª–∏: %s\n", u.option.Text)

		switch u.option.ID {
		case 0:
			BuyChair()
		case 1:
			LoadStorage("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
		case 2:
			DelChairMan()
		case 3:
			SellChair()
		case 4:
			Timeloading(1, "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É...")
			return
		}
		Timeloading(1, "")
		fmt.Println("")
		waitEnter(reader)
	}

}

func LoadStorage(s string) {
	db := storage.NewStorage("data, json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}
	fmt.Println(s)
	var nameUserAns string
	fmt.Print("–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ: ")
	_, err := fmt.Scan(&nameUserAns)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞! –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å", err)
	}
	Timeloading(2, "–ü–æ–∏—Å–∫...")
	// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
	chairs, err := db.Find(map[string]interface{}{
		"name": nameUserAns,
	})
	if err != nil {
		fmt.Println("Error:", err)
	}
	fmt.Println(chairs)
}

func BuyChair() {
	// –¢—É—Ç —É –º–µ–Ω—è –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫–ª–∞–¥
	db := storage.NewStorage("data, json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}

	fmt.Println("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ?")
	prompt := "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: "
	menuItems := []string{"Chair", "Wardrobe", "Conditioner"}
	u := &UserInput{}
	CreatMenu(prompt, menuItems, u)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", u.option.Text)
	// Model
	promptModel := "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: "
	menuItemsModel := []string{"Sonyx", "Kurumi"}
	uModel := &UserInput{}
	CreatMenu(promptModel, menuItemsModel, uModel)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uModel.option.Text)
	// Material
	promptMaterial := "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª: "
	menuItemsMaterial := []string{"wood", "metal", "plastic"}
	uMaterial := &UserInput{}
	CreatMenu(promptMaterial, menuItemsMaterial, uMaterial)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uMaterial.option.Text)
	// Price
	promptPrice := "–ü—Ä–∞–π—Å: "
	menuItemsPrice := []string{"5000", "15000", "30000"}
	uPrice := &UserInput{}
	CreatMenu(promptPrice, menuItemsPrice, uPrice)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uPrice.option.Text)
	num, err := strconv.Atoi(uPrice.option.Text)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∏–∑ string –≤ int", err)
	}

	//InStock
	fmt.Print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ª—å–µ–≤: ")
	var uInStock int
	fmt.Scan(&uInStock)

	// ID
	ids := rand.Intn(1000)

	Timeloading(3, "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...")
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä
	db.AddChair(warehouse.Chair{
		Id:       ids,
		Name:     uModel.option.Text,
		Material: uMaterial.option.Text,
		Price:    num,
		InStock:  uInStock,
	})
	fmt.Println("–í—ã –∫—É–ø–∏–ª–∏ chair")
}

func DelChairMan() {
	db := storage.NewStorage("data, json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}
	var i int
	LoadStorage("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ id c –ø–æ–º–æ—â—é –º–æ–¥–µ–ª–∏")

	fmt.Print("ID: ")
	_, err := fmt.Scan(&i)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–∏—Ñ—Ä", err)
	}
	Timeloading(2, "–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
	if err := db.DelChair(i); err != nil {
		log.Fatal()
	}
}

func SellChair() {
	db := storage.NewStorage("data, json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}
	fmt.Println("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä")
	LoadStorage("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ Id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
	fmt.Print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–µ–¥–∏—Ç–µ id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : ")
	var idr int
	var instock int
	_, err := fmt.Scan(&idr, &instock)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–∏—Ñ—Ä", err)
	}
	Timeloading(4, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...")

	soldChair, err := db.Sell(idr, instock)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ ", err)
	}
	fmt.Printf("üí∞ –ü—Ä–æ–¥–∞–Ω–æ %d —Å—Ç—É–ª—å–µ–≤ –º–æ–¥–µ–ª–∏ '%s'\n", 3, soldChair.Name)
	fmt.Printf("üìä –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: %d\n", soldChair.InStock)
}

func Timeloading(n time.Duration, s string) {
	fmt.Println(s)
	time.Sleep(n * time.Second)
}
