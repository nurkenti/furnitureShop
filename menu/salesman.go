package menu

import (
	"bufio"
	"fmt"
	"github/kaiiiman/chairStore/storage"
	"github/kaiiiman/chairStore/warehouse"
	"log"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

func Salesman1() {
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ü—Ä–æ–¥–æ–≤—Ü–∞), –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–¥–∞—Ç—å –∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º")
	fmt.Println("–•–æ—Ä–æ—à–∏–π –∏–≥—Ä—ã!")
}
func waitEnter(reader *bufio.Reader) {
	fmt.Print("")
	_, _ = reader.ReadString('\n') // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è } //
}

func Doing() {
	reader := bufio.NewReader(os.Stdin)
	for {
		prompt := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
		menuItems := []string{"–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ü–æ–∏—Å–∫", "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", "–í—ã—Ö–æ–¥"}
		u := &UserInput{}

		CreatMenu(prompt, menuItems, u)
		fmt.Printf("\n–í—ã –≤—ã–±—Ä–∞–ª–∏: %s\n", u.option.Text)

		switch u.option.ID {
		case 0:
			BuyChair()
		case 1:
			LoadStorage("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
		case 2:
			DelProductM()
		case 3:
			SellChair()
		case 4:
			Timeloading(1, "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É...")
			return
		}
		Timeloading(1, "")
		fmt.Println("")
		waitEnter(reader)
	}

}

func LoadStorage(s string) {
	db := storage.NewStorage("data.json")
	if err := db.Load(); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}

	// fmt.Println(s)
	// var modelAns string
	// _, err := fmt.Scan(&modelAns)
	// if err != nil {
	// 	log.Fatal("–û—à–∏–±–∫–∞! –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å", err)
	// }

	var typeAns string
	fmt.Print("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ :")
	_, errs := fmt.Scan(&typeAns)
	if errs != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å ", errs)
	}

	searchProduct := make(map[string]interface{})

	if typeAns != "" {
		switch typeAns {
		case "chair", "wardrobe", "conditioner":
			searchProduct["type"] = typeAns
		default:
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")
			return
		}
	}
	Timeloading(2, "–ü–æ–∏—Å–∫...")
	// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
	productCheck, err := db.Find(searchProduct)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	if len(searchProduct) == 0 {
		fmt.Println("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	fmt.Println("\n–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä—ã: ")
	for i, p := range productCheck {
		{
			fmt.Printf("%d.ID: %d, model: %s, price: %d, instock: %d\n",
				i+1,
				p.GetID(),
				p.GetModel(),
				p.GetPrice(),
				p.GetInStock())
		}
	}
}

func BuyChair() {
	// –¢—É—Ç —É –º–µ–Ω—è –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫–ª–∞–¥
	db := storage.NewStorage("data.json")
	if err := db.Load(); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}

	fmt.Println("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ?")
	prompt := "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: "
	menuItems := []string{"Chair", "Wardrobe", "Conditioner"}
	u := &UserInput{}
	CreatMenu(prompt, menuItems, u)
	// numProd, err := strconv.Atoi(u.option.Text)
	// if err != nil {
	// 	fmt.Println("–û—à–∏–±–∫–∞ –∏–∑ string –≤ int", err)
	// }
	switch u.option.ID {
	case 0:
		addChair(db)
	case 1:
		addWardrobe(db)
	case 2:
		addConditioner(db)

	}
	fmt.Println("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
}
func addChair(db *storage.Storage) {
	i := ID()
	m := Model("Sonyx", "Kurumi")
	ma := Material("wood", "metal", "plastic")
	pr := Price("5000", "10000", "20000")
	in := Instock("—Å—Ç—É–ª—å–µ–≤")
	chair := &warehouse.Chair{
		BaseProduct: warehouse.BaseProduct{
			ID:      i,
			Model:   m,
			Price:   pr,
			InStock: in,
		},
		Material: ma,
		Type:     "chair",
	}
	Timeloading(3, "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...")
	if err := db.AddProduct(chair); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", err)
	}
}

func addWardrobe(db *storage.Storage) {
	i := ID()
	m := Model("Unibi", "Facito")
	mat := Material("wood", "metal", "bamboo")
	p := Price("20000", "50000", "100000")
	in := Instock("—à–∫–∞—Ñ–∞")
	wardrobe := &warehouse.Wardrobe{
		BaseProduct: warehouse.BaseProduct{
			ID:    i,
			Model: m,

			Price:   p,
			InStock: in,
		},
		Material: mat,
		Type:     "wardrobe",
	}
	Timeloading(3, "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...")
	if err := db.AddProduct(wardrobe); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", err)
	}
}
func addConditioner(db *storage.Storage) {
	i := ID()
	m := Model("Xpx", "Faca")
	mat := Version()
	p := Price("40000", "150000", "620000")
	in := Instock("–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤")
	conditioner := &warehouse.Conditioner{
		BaseProduct: warehouse.BaseProduct{
			ID:      i,
			Model:   m,
			Price:   p,
			InStock: in,
		},
		Version: mat,
		Type:    "conditioner",
	}
	Timeloading(3, "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...")
	if err := db.AddProduct(conditioner); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", err)
	}
}

func ID() int {
	ids := rand.Intn(1000)
	return ids
}

func Model(a, b string) string {
	promptModel := "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å: "
	menuItemsModel := []string{a, b}
	uModel := &UserInput{}
	CreatMenu(promptModel, menuItemsModel, uModel)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uModel.option.Text)
	return uModel.option.Text
}

func Price(a, b, c string) int {
	promptPrice := "–ü—Ä–∞–π—Å: "
	menuItemsPrice := []string{a, b, c}
	uPrice := &UserInput{}
	CreatMenu(promptPrice, menuItemsPrice, uPrice)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uPrice.option.Text)
	num, err := strconv.Atoi(uPrice.option.Text)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∏–∑ string –≤ int", err)
	}
	return num
}
func Material(a, b, c string) string {

	// Material
	promptMaterial := "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª: "
	menuItemsMaterial := []string{a, b, c}
	uMaterial := &UserInput{}
	CreatMenu(promptMaterial, menuItemsMaterial, uMaterial)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uMaterial.option.Text)
	return uMaterial.option.Text
}
func Version() string {
	promptVersion := "–í—ã–±–µ—Ä–∏—Ç–µ –í–µ—Ä—Å–∏—é: "
	menuItemsVersion := []string{"super01", "cco2", "312ultra"}
	uVersion := &UserInput{}
	CreatMenu(promptVersion, menuItemsVersion, uVersion)
	fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏:", uVersion.option.Text)
	return uVersion.option.Text

}
func Instock(a string) int {
	//InStock
	fmt.Printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ %s: ", a)
	var uInStock int
	fmt.Scan(&uInStock)
	return uInStock

}

func DelProductM() {
	db := storage.NewStorage("data.json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}

	fmt.Println("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –µ–≥–æ id")
	LoadStorage("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ id —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä: ")
	var id int
	if _, err := fmt.Scan(&id); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ID")
	}
	// 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	fmt.Printf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID %d? (y/n): ", id)
	var confirm string
	fmt.Scan(&confirm)
	if strings.ToLower(confirm) != "y" {
		fmt.Println("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		return
	}

	if err := db.DelProduct(id); err != nil {
		log.Fatal("–û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", err)
	}
	fmt.Println("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
}

func SellChair() {
	db := storage.NewStorage("data.json")
	if err := db.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", err)
	}
	fmt.Println("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä")
	LoadStorage("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ Id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
	fmt.Print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–µ–¥–∏—Ç–µ id: ")
	var idr int
	var instock int
	_, err := fmt.Scan(&idr)
	fmt.Print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ")
	_, errs := fmt.Scan(&instock)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–∏—Ñ—Ä", err)
	}
	if errs != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–∏—Ñ—Ä", err)
	}
	Timeloading(4, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...")

	soldChair, err := db.Sell(idr, instock)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ ", err)
	}
	fmt.Printf("üí∞ –ü—Ä–æ–¥–∞–Ω–æ %d —Å—Ç—É–ª—å–µ–≤ –º–æ–¥–µ–ª–∏ '%s'\n", 3, soldChair.GetModel())
	fmt.Printf("üìä –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: %d\n", soldChair.GetInStock())
}

func Timeloading(n time.Duration, s string) {
	fmt.Println(s)
	time.Sleep(n * time.Second)
}
