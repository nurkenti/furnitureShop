package storage

import (
	"encoding/json"
	"errors"
	"fmt"
	"github/kaiiiman/chairStore/warehouse"
	"os"
	"sync"
)

// –ê —ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

var (
	ErrNotFound = errors.New("—Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
)

type Storage struct {
	chairs map[int]warehouse.Chair
	mu     sync.Mutex
	file   string
}

func NewStorage(file string) *Storage {
	return &Storage{
		chairs: make(map[int]warehouse.Chair),
		file:   file,
	}
}

func (s *Storage) AddChair(chair warehouse.Chair) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if _, exist := s.chairs[chair.Id]; exist {
		return errors.New("c—Ç—É–ª —Å —Ç–∞–∫–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}

	s.chairs[chair.Id] = chair
	if err := s.save(); err != nil {
		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ %v", err)
	}
	fmt.Printf("‚úÖ –°—Ç—É–ª –¥–æ–±–∞–≤–ª–µ–Ω: %+v\n", chair)
	return nil

}

func (s *Storage) DelChair(id int) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	if _, exist := s.chairs[id]; !exist {
		return fmt.Errorf("–¢–æ–≤–∞—Ä %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", id)
	}

	delete(s.chairs, id)

	if err := s.save(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	fmt.Printf("üóëÔ∏è –°—Ç—É–ª —Å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n", id)
	return nil
}

func (s *Storage) save() error {
	data, err := json.Marshal(s.chairs)
	if err != nil {
		return nil
	}
	return os.WriteFile(s.file, data, 0644)
}

func (s *Storage) Load() error {
	data, err := os.ReadFile(s.file)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &s.chairs)
}
