package service

import (
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"sync"

	"github.com/nurkenti/furnitureShop/internal/domain"
)

// –ê —ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

var (
	ErrNotFound = errors.New("—Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
)

type Storage struct {
	products map[int]domain.Product
	mu       sync.RWMutex
	file     string
}

func NewStorage(file string) *Storage {
	return &Storage{
		products: make(map[int]domain.Product),
		file:     file,
	}
}

func (s *Storage) AddProduct(product domain.Product) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if _, exist := s.products[product.GetID()]; exist {
		return errors.New("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	} // exist –º—ã –ø—Ä–æ–≤–µ—Ä—è–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ map

	s.products[product.GetID()] = product // –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ save –∏ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –Ω–∏–ª  —Ç–æ —Ö–∞–Ω–∞
	fmt.Printf("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: %+v\n", product)
	return s.save()

}
func (s *Storage) DelProduct(id int) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	if _, exist := s.products[id]; !exist {
		return fmt.Errorf("–¢–æ–≤–∞—Ä %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", id)
	}

	delete(s.products, id)

	if err := s.save(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	fmt.Printf("üóëÔ∏è –¢–æ–≤–∞—Ä —Å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n", id)
	return nil
}

func (s *Storage) save() error {
	type productSave struct {
		Type string         `json:"type"`
		Data domain.Product `json:"data"`
	}

	toSave := make(map[int]productSave)
	for id, p := range s.products {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
		var typeStr string
		switch p.(type) {
		case *domain.Chair:
			typeStr = "chair"
		case *domain.Wardrobe:
			typeStr = "wardrobe"
		case *domain.Conditioner:
			typeStr = "conditioner"
		default:
			return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: %T", p)
		}
		toSave[id] = productSave{
			Type: typeStr,
			Data: p,
		}
	}

	file, err := os.Create(s.file)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return encoder.Encode(toSave)
}
func (s *Storage) Load() error {
	s.mu.RLock()
	defer s.mu.RUnlock()

	data, err := os.ReadFile(s.file)
	if err != nil {
		if os.IsNotExist(err) {
			return nil // –§–∞–π–ª–∞ –Ω–µ—Ç - —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
		}
		return err
	}

	if len(data) == 0 {
		return nil // –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª - –Ω–µ –æ—à–∏–±–∫–∞
	}

	type productLoad struct {
		Type string          `json:"type"`
		Data json.RawMessage `json:"data"`
	}

	var loaded map[int]productLoad
	if err := json.Unmarshal(data, &loaded); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å —Ä–∞–∑–±–æ—Ä–∞–º —Ñ–∞–π–ª–∞ %w", err)
	}
	s.products = make(map[int]domain.Product)
	for id, item := range loaded {
		var p domain.Product

		switch item.Type {
		case "chair":
			p = &domain.Chair{}
		case "wardrobe":
			p = &domain.Wardrobe{}
		case "conditioner":
			p = &domain.Conditioner{}
		default:
			return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: %s", item.Type)
		}
		if err := json.Unmarshal(item.Data, p); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ %d: %w", id, err)
		}
		s.products[id] = p
	}

	return nil
}
