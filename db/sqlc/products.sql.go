// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChair = `-- name: CreateChair :one

INSERT INTO chair(
  id,model, material, price
)VALUES ($1,$2,$3,$4)
RETURNING id, model, material, price, created_at
`

type CreateChairParams struct {
	ID       pgtype.UUID       `json:"id"`
	Model    ChairModel        `json:"model"`
	Material NullChairMaterial `json:"material"`
	Price    pgtype.Float8     `json:"price"`
}

// Chair
func (q *Queries) CreateChair(ctx context.Context, arg CreateChairParams) (Chair, error) {
	row := q.db.QueryRow(ctx, createChair,
		arg.ID,
		arg.Model,
		arg.Material,
		arg.Price,
	)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createWardrobe = `-- name: CreateWardrobe :one

INSERT INTO wardrobe(
  id, model, material, price
)Values($1,$2,$3,$4)
RETURNING id, model, material, price, created_at
`

type CreateWardrobeParams struct {
	ID       pgtype.UUID          `json:"id"`
	Model    WardrobeModel        `json:"model"`
	Material NullWardrobeMaterial `json:"material"`
	Price    float64              `json:"price"`
}

// Wardrobe
func (q *Queries) CreateWardrobe(ctx context.Context, arg CreateWardrobeParams) (Wardrobe, error) {
	row := q.db.QueryRow(ctx, createWardrobe,
		arg.ID,
		arg.Model,
		arg.Material,
		arg.Price,
	)
	var i Wardrobe
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChair = `-- name: DeleteChair :exec
DELETE FROM chair
WHERE id = $1
`

func (q *Queries) DeleteChair(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteChair, id)
	return err
}

const deleteWardrobe = `-- name: DeleteWardrobe :exec
DELETE FROM wardrobe
WHERE id = $1
`

func (q *Queries) DeleteWardrobe(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWardrobe, id)
	return err
}

const getChair = `-- name: GetChair :one
SELECT id, model, material, price, created_at FROM chair 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChair(ctx context.Context, id pgtype.UUID) (Chair, error) {
	row := q.db.QueryRow(ctx, getChair, id)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getChairByModel = `-- name: GetChairByModel :one
SELECT id, model, material, price, created_at FROM chair
WHERE model = $1 LIMIT 1
`

func (q *Queries) GetChairByModel(ctx context.Context, model ChairModel) (Chair, error) {
	row := q.db.QueryRow(ctx, getChairByModel, model)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getWardrobe = `-- name: GetWardrobe :one
SELECT id, model, material, price, created_at FROM wardrobe
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWardrobe(ctx context.Context, id pgtype.UUID) (Wardrobe, error) {
	row := q.db.QueryRow(ctx, getWardrobe, id)
	var i Wardrobe
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getWardrobeByModel = `-- name: GetWardrobeByModel :one
SELECT id, model, material, price, created_at From wardrobe
where model = $1 LIMIT 1
`

func (q *Queries) GetWardrobeByModel(ctx context.Context, model WardrobeModel) (Wardrobe, error) {
	row := q.db.QueryRow(ctx, getWardrobeByModel, model)
	var i Wardrobe
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getWarhouse = `-- name: GetWarhouse :one

SELECT FROM warehouse
Where product_model = $1 LIMIT 1
`

type GetWarhouseRow struct {
}

// Warehouse
func (q *Queries) GetWarhouse(ctx context.Context, productModel string) (GetWarhouseRow, error) {
	row := q.db.QueryRow(ctx, getWarhouse, productModel)
	var i GetWarhouseRow
	err := row.Scan()
	return i, err
}

const listChairs = `-- name: ListChairs :many
SELECT id, model, material, price, created_at FROM chair
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListChairsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListChairs(ctx context.Context, arg ListChairsParams) ([]Chair, error) {
	rows, err := q.db.Query(ctx, listChairs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chair
	for rows.Next() {
		var i Chair
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.Material,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWardrobe = `-- name: ListWardrobe :many
SELECT id, model, material, price, created_at FROM wardrobe
ORDER By created_at DESC
LIMIT $1 OFFSET $2
`

type ListWardrobeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWardrobe(ctx context.Context, arg ListWardrobeParams) ([]Wardrobe, error) {
	rows, err := q.db.Query(ctx, listWardrobe, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wardrobe
	for rows.Next() {
		var i Wardrobe
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.Material,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWarehouse = `-- name: ListWarehouse :many
SELECT product_model, product_type, quantity, updated_at FROM warehouse
ORDER BY product_type, product_model
`

func (q *Queries) ListWarehouse(ctx context.Context) ([]Warehouse, error) {
	rows, err := q.db.Query(ctx, listWarehouse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Warehouse
	for rows.Next() {
		var i Warehouse
		if err := rows.Scan(
			&i.ProductModel,
			&i.ProductType,
			&i.Quantity,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChair = `-- name: UpdateChair :one
UPDATE chair
SET
  model = $2,
  material = $3,
  price = $4
WHERE id = $1
RETURNING id, model, material, price, created_at
`

type UpdateChairParams struct {
	ID       pgtype.UUID       `json:"id"`
	Model    ChairModel        `json:"model"`
	Material NullChairMaterial `json:"material"`
	Price    pgtype.Float8     `json:"price"`
}

func (q *Queries) UpdateChair(ctx context.Context, arg UpdateChairParams) (Chair, error) {
	row := q.db.QueryRow(ctx, updateChair,
		arg.ID,
		arg.Model,
		arg.Material,
		arg.Price,
	)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const updateWardrobe = `-- name: UpdateWardrobe :one
UPDATE wardrobe
SET
  model = $2,
  material = $3,
  price=  $4
Where id = $1
RETURNING id, model, material, price, created_at
`

type UpdateWardrobeParams struct {
	ID       pgtype.UUID          `json:"id"`
	Model    WardrobeModel        `json:"model"`
	Material NullWardrobeMaterial `json:"material"`
	Price    float64              `json:"price"`
}

func (q *Queries) UpdateWardrobe(ctx context.Context, arg UpdateWardrobeParams) (Wardrobe, error) {
	row := q.db.QueryRow(ctx, updateWardrobe,
		arg.ID,
		arg.Model,
		arg.Material,
		arg.Price,
	)
	var i Wardrobe
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.Material,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const updateWarehouseQuantity = `-- name: UpdateWarehouseQuantity :exec
UPDATE warehouse
SET quantity = $2, update_at = now()
WHERE product_model = $1
`

type UpdateWarehouseQuantityParams struct {
	ProductModel string `json:"product_model"`
	Quantity     int32  `json:"quantity"`
}

func (q *Queries) UpdateWarehouseQuantity(ctx context.Context, arg UpdateWarehouseQuantityParams) error {
	_, err := q.db.Exec(ctx, updateWarehouseQuantity, arg.ProductModel, arg.Quantity)
	return err
}
